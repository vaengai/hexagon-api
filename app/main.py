from schemas import HabitRead, HabitCreate
from database import Base, engine, get_db
from fastapi import FastAPI
from models import Habit
from typing import List
# Override POST /habit to enforce unique title and return autogenerated id
from fastapi import HTTPException, status, Depends, APIRouter
from sqlalchemy.orm import Session

Base.metadata.create_all(bind=engine)
app = FastAPI(title="Habit Tracker API")




router = APIRouter()

@router.post("/habit", response_model=HabitRead, status_code=status.HTTP_201_CREATED)
def create_habit(habit: HabitCreate, db: Session = Depends(get_db)):
    existing = db.query(Habit).filter(Habit.title.ilike(habit.title.strip())).first()
    if existing:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=f"Habit with title '{habit.title}' already exists."
        )
    new_habit = Habit(**habit.dict())
    db.add(new_habit)
    db.commit()
    db.refresh(new_habit)
    return new_habit


# -------------------- CRUD Endpoints for Habit --------------------

@router.get("/habit", response_model=List[HabitRead])
def get_habits(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    return db.query(Habit).offset(skip).limit(limit).all()


@router.get("/habit/{habit_id}", response_model=HabitRead)
def get_habit(habit_id: str, db: Session = Depends(get_db)):
    habit = db.query(Habit).filter(Habit.id == habit_id).first()
    if not habit:
        raise HTTPException(status_code=404, detail="Habit not found")
    return habit


@router.put("/habit/{habit_id}", response_model=HabitRead)
def update_habit(habit_id: str, habit_update: HabitCreate, db: Session = Depends(get_db)):
    habit = db.query(Habit).filter(Habit.id == habit_id).first()
    if not habit:
        raise HTTPException(status_code=404, detail="Habit not found")

    existing = db.query(Habit).filter(Habit.title.ilike(habit_update.title.strip()), Habit.id != habit_id).first()
    if existing:
        raise HTTPException(
            status_code=400,
            detail=f"Habit with title '{habit_update.title}' already exists."
        )

    for key, value in habit_update.dict().items():
        setattr(habit, key, value)
    db.commit()
    db.refresh(habit)
    return habit


@router.delete("/habit/{habit_id}", status_code=status.HTTP_204_NO_CONTENT)
def delete_habit(habit_id: str, db: Session = Depends(get_db)):
    habit = db.query(Habit).filter(Habit.id == habit_id).first()
    if not habit:
        raise HTTPException(status_code=404, detail="Habit not found")
    db.delete(habit)
    db.commit()
    return

app.include_router(router)